/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package myDesign;

import actionUtils.Action;
import actionUtils.AdminReceive;
//import com.sun.org.apache.bcel.internal.generic.BREAKPOINT;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import multiSockets.MulticastRx;
import test.DesignSimcar;
import test.DesignSimn;
import test.DesignSimstret;

/**
 *
 * @author jp
 */
public class Source extends javax.swing.JFrame {

    String title = " SOURCE      Vampire Attacks: Draining Life from Wireless Ad Hoc Sensor Networks";
    Action action;
    String fname;
    //  Thread t = new Thread(new connect());
    String s1;
    StringBuffer buffer;
    //  Thread t1 = new Thread(new connect1());
//Thread jpt = new Thread(new jpro());

    /**
     * Creates new form Source
     */
    public Source() {
        initComponents();
        init();
        setTitle(title);
        jProgressBar1.setValue(100);
        buttonGroup1.add(jRadioButton1);
        buttonGroup1.add(jRadioButton2);
        buttonGroup1.add(jRadioButton3);
        //   t.start();
        //   t1.start();
    }

    private void init() {
        // TODO Auto-generated method stub
        action = new Action();
        new AdminReceive(this);
        new MulticastRx(this);
    }

    public String get() {
        String gets = null;
        if (jRadioButton1.isSelected()) {
            gets = jRadioButton1.getText();


        } else if (jRadioButton2.isSelected()) {
            gets = jRadioButton2.getText();
        } else if (jRadioButton3.isSelected()) {
            gets = jRadioButton3.getText();
        } else {
            JOptionPane.showMessageDialog(null, "Select a Mehtod..");
        }
        return gets;
    }

    public class jpro implements Runnable {

        public void run() {
            for (int i = 100; i >= 80; i--) {
                try {
                    Thread.sleep(100);
                    jProgressBar1.setValue(i);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Source.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    /*  class connect implements Runnable {

     public void run() {
     try {
     ServerSocket ss = new ServerSocket(8401);
     Socket s = ss.accept();
     System.out.println("Receive");
     InputStream is = s.getInputStream();
     ObjectInputStream ois = new ObjectInputStream(is);
     ArrayList<String> array  = (ArrayList<String>) ois.readObject();
     System.out.println(array);
     s1=array.get(0);
     String s2 = array.get(1);
     txtRLC.setText(s2);
     is.close();
     ois.close();
     s.close();
     ss.close();
     } catch (Exception e) {
     System.out.println("OOPS! Errors are found -> " + e);
     }
     }
     }
     */
    /*      class connect1 implements Runnable {

     public void run() {
     try {
     ServerSocket ss = new ServerSocket(8501);
     Socket s = ss.accept();
     System.out.println("Receive");
     InputStream is = s.getInputStream();
     ObjectInputStream ois = new ObjectInputStream(is);
     ArrayList<String> array = (ArrayList<String>) ois.readObject();
     System.out.println(array);
     s1 = array.get(0);
     String s3 = array.get(2);
     // btnDecodeLC.setEnabled(true);
     txtRHV.setText(s3);
     is.close();
     ois.close();
     s.close();
     ss.close();
     } catch (Exception e) {
     System.out.println("OOPS! Errors are found -> " + e);
     }
     }
     }
    
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Source");
        setMinimumSize(new java.awt.Dimension(850, 450));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Energy Level :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(510, 30, 90, 20);

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(240, 310, 80, 30);

        jTextField1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        getContentPane().add(jTextField1);
        jTextField1.setBounds(90, 30, 240, 30);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Path :");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(370, 270, 40, 20);

        jProgressBar1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        getContentPane().add(jProgressBar1);
        jProgressBar1.setBounds(610, 30, 210, 30);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("File Name :");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 30, 80, 20);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Neighbor Nodes :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(510, 80, 120, 20);

        jRadioButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jRadioButton1.setText("Stretch_Attack");
        getContentPane().add(jRadioButton1);
        jRadioButton1.setBounds(100, 330, 130, 25);

        jRadioButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jRadioButton2.setText("Secure_Transmission");
        getContentPane().add(jRadioButton2);
        jRadioButton2.setBounds(100, 370, 170, 25);

        jRadioButton3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jRadioButton3.setText("Carousel_Attack");
        getContentPane().add(jRadioButton3);
        jRadioButton3.setBounds(100, 290, 140, 25);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 80, 370, 150);

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(360, 300, 380, 80);

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(340, 30, 80, 30);

        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(510, 110, 230, 170);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/5.jpg"))); // NOI18N
        getContentPane().add(jLabel5);
        jLabel5.setBounds(0, 0, 860, 420);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        int retVal = fc.showOpenDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            File f = null;
            try {
                f = new File(selectedFile.getCanonicalPath());
            } catch (IOException e2) {
                e2.printStackTrace();
            }

            jTextField1.setText(f.getName());
            fname = f.getName();
            try {
                BufferedReader bufferReader = new BufferedReader(new FileReader(f));
                String append = "";
                String line = bufferReader.readLine();
                while (line != null) {
                    append += line + "\n";
                    line = bufferReader.readLine();
                }
                jTextArea1.setText(append);
                // buffer.append(jTextArea1.getText());
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            // String getV = get().toString();
            if (get().equals(null) || (get() == null)) {

                JOptionPane.showMessageDialog(null, "Select a method to send Data....");

            } else {
                if (get().equalsIgnoreCase("Secure_Transmission")) {
                    System.out.println("Secure_Transmission send");

                    jTextArea2.append("Node-A-->Node-B-->Node-C-->Node-D-->Node-E-->Node-F-->Sink");
                    new DesignSimn().setVisible(true);
                    jProgressBar1.setValue(0);
                    Thread t3 = new Thread(new jpro());
                    t3.start();


                    try {
                        ObjectOutputStream oos, oos1, oos2, oos3, oos4, oos5, oos6;
                        OutputStream os, os1, os2, os3, os4, os5, os6;
                        Socket s = null, s1 = null, s2 = null, s3 = null, s4 = null, s5 = null, s6 = null;
                        ArrayList<String> array = new ArrayList<String>();
                        array.add(0, jTextField1.getText());
                        array.add(1, jTextArea1.getText());
                        array.add(2, "Secure_Transmission");

                        s = new Socket("localhost", 8401);
                        os = s.getOutputStream();
                        oos = new ObjectOutputStream(os);
                        oos.writeObject(array);
                        oos.close();
                        os.close();
                        s.close();

                    } catch (UnknownHostException ex) {
                        Logger.getLogger(Source.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Source.class.getName()).log(Level.SEVERE, null, ex);
                    }



                }
                if (get().equalsIgnoreCase("Carousel_Attack")) {
                    System.out.println("carousel send");
                    jTextArea2.append("Node-A-->>>Node-B-->>>Node-C-->>>Node-D-->>>Node-E-->>>Node-F-->>>Sink");
                    new DesignSimcar().setVisible(true);
                    jProgressBar1.setValue(0);
                    Thread t3 = new Thread(new jpro());
                    t3.start();
                    try {
                        ObjectOutputStream oos, oos1, oos2, oos3, oos4, oos5, oos6;
                        OutputStream os, os1, os2, os3, os4, os5, os6;
                        Socket s = null, s1 = null, s2 = null, s3 = null, s4 = null, s5 = null, s6 = null;
                        ArrayList<String> array = new ArrayList<String>();
                        array.add(0, jTextField1.getText());
                        array.add(1, jTextArea1.getText());
                        array.add(2, "carousel");


                        s = new Socket("localhost", 8401);
                        os = s.getOutputStream();
                        oos = new ObjectOutputStream(os);
                        oos.writeObject(array);
                        oos.close();
                        os.close();
                        s.close();

                    } catch (UnknownHostException ex) {
                        Logger.getLogger(Source.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Source.class.getName()).log(Level.SEVERE, null, ex);
                    }



                }
                if (get().equalsIgnoreCase("Stretch_Attack")) {
                    System.out.println("stretch send");
                    jTextArea2.append("Node-A-->Node-B-->Node-C-->Node-D-->Node-E-->Sink");
                    new DesignSimstret().setVisible(true);
                    jProgressBar1.setValue(0);
                    Thread t3 = new Thread(new jpro());
                    t3.start();
                    try {
                        ObjectOutputStream oos, oos1, oos2, oos3, oos4, oos5, oos6;
                        OutputStream os, os1, os2, os3, os4, os5, os6;
                        Socket s = null, s1 = null, s2 = null, s3 = null, s4 = null, s5 = null, s6 = null;
                        ArrayList<String> array = new ArrayList<String>();
                        array.add(0, jTextField1.getText());
                        array.add(1, jTextArea1.getText());
                        array.add(2, "stretch");

                        s = new Socket("localhost", 8401);
                        os = s.getOutputStream();
                        oos = new ObjectOutputStream(os);
                        oos.writeObject(array);
                        oos.close();
                        os.close();
                        s.close();

                    } catch (UnknownHostException ex) {
                        Logger.getLogger(Source.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Source.class.getName()).log(Level.SEVERE, null, ex);
                    }







                }

            }
        } catch (Exception e) {
        }




    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Source.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Source.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Source.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Source.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Source().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    public javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
